1) How can u marge multiple commits into one commit id?

	-Find the IDs of the commits you want to merge.Open your Git repository in a terminal or command prompt.Type git rebase -i HEAD~n and hit Enter. 
	-Replace n with the number of commits you want to merge plus one.A list of commits will appear in a text file.	-Change the word "pick" to "squash" or just "s" in front of ever  	 commit except the first one.Save the file and close it.
	-You'll be asked to write a new message for the merged commit.
	-Write your message, save, and close the editor.Git will create a new commit that combines all the changes from the merged commits.
	
2) What is git diff?
	- diff is a command-line utility that allows you to compare two files line by line. It can also compare the contents of directories.

3) How can we drop multiple indexing file in stash?
	If you want to delete stash 1 to 3,just go to shell and type the following command:
	for n in {1..3}
	do
	git stash drop stash@{1}   
	done
	-Deletion of all stashes is done using the 'git stash clear' command. A specific stash can be removed by using the 'git stash drop stash@{0}' command.

4) Branching strategies workflow.
	- Branches are primarily used as a means for teams to develop features giving them a separate workspace for their code. These branches are usually merged back to a master branch upon 	  completion of work. In this way, features (and any bug and bug fixes) are kept apart from each other allowing you to fix mistakes more easily. 
	-for that we need to create a seprate branch, once you created a seprate branch for developers. Then existing branch data will copy automatically into new branch, those new branch 	 called as a featured branch.
	-each task has a seprate branch. After done with the code in feature branch need -> commit -> merge with master. this concept is useful for parallel development.

5) Ansible tower configuration and setup.
    change directory---> cd /tmp
install ansible tower ---> curl -O https://releases.ansible.com/ansible-tower/setup/ansible-tower-setup-3.7.3-1.tar.gz
unzip file---> tar xvfz /tmp/ansible-tower-setup-3.7.3-1.tar.gz
change directory ---> cd /tmp/ansible-tower-setup-*/
edit inventory file ---> vim inventory
Fill out a couple of variables in the inventory file, fill admin_password and pg_password. Also, fill in the web_server_ssl_cert and web_server_ssl_key fields, and uncomment both, as shown:
	# Certificate and key to install in nginx for the web UI and API
	web_server_ssl_cert=/home/ec2-user/cert.pem
	web_server_ssl_key=/home/ec2-user/key.pem

Run the Ansible Tower setup script---> sudo ./setup.sh
6) Make connections to the Ansible master server with nodes which are present on premises as well as on cloud.
    paste id_rsa.pub in nodes Authorized_key. Put private ip address of node which is present on premises in inventry file. 
    
7) Write a single playbook with global and local variables.
---
- name: Example Playbook with Global and Local Variables
  hosts: localhost
  gather_facts: no
  vars:
    global_var: "This is a global variable"
  tasks:
    - name: Display global variable
      debug:
        msg: "Global variable: {{ global_var }}"
    
    - name: Set local variable
      set_fact:
        local_var: "This is a local variable"
    
    - name: Display local variable
      debug:
        msg: "Local variable: {{ local_var }}"
...

8) Write a script for the prompt variable.
	Create a new file “input.sh” and write below script:
#!/bin/bash
 
echo "Enter Your Name: "
read my_var
echo "Welcome ${my_var}!"
save file.
then run command
chmod +x input.sh
./input.sh

9) Write a script for git  push where the commit message will be the same.
vim task.sh
	#!/bin/bash
	touch file1
	touch file2
	COMMIT_MESSAGE="commit message"
	git add .
	git commit -m "$COMMIT_MESSAGE"
	git push origin main
save file. 
Make the script executable by running the following command in the terminal:
chmod +x task.sh
Run the script by executing:
./task.sh


10) Write a playbook in which package install,start,enable,deployment, uninstall modules are present.

12) Create a Directory and 3 files inside that directory with any content put into the script, when we run the script in output we have to show the output of all three files. This script has to run without execution permission.
    create file and then vim file.sh
	13)#!/bin/bash

# Create a directory
mkdir my_directory

# Change into the created directory
cd my_directory || exit

# Create three files with content
echo "Content for File 1" > file1.txt
echo "Content for File 2" > file2.txt
echo "Content for File 3" > file3.txt

# Display the contents of all three files
cat file1.txt
cat file2.txt
cat file3.txt

Then, you can run the script using the bash command
bash file.sh

